import { NextRequest, NextResponse } from 'next/server'
import { createAdminClient } from '@/lib/supabase/server'
import { RemoveApiLogger } from '@/lib/remove-api-logger'

export async function GET(req: NextRequest) {
  try {
    // ‰ΩøÁî®ÁÆ°ÁêÜÂëòÂÆ¢Êà∑Á´ØÔºåÁ°Æ‰øùÂú®Êó†ÁôªÂΩï‰ºöËØùÂíåRLSÂºÄÂêØÊó∂‰πüËÉΩËØªÂèñÁúüÂÆûÊï∞ÊçÆ
    const supabase = createAdminClient()

    // Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÁöÑÂºÄÂßãÂíåÁªìÊùüÊó∂Èó¥Ôºà‰ΩøÁî®UTCÊó∂Èó¥Á°Æ‰øùÊó∂Âå∫‰∏ÄËá¥ÊÄßÔºâ
    const now = new Date()
    
    // Ëé∑ÂèñÂåó‰∫¨Êó∂Èó¥ÁöÑ‰ªäÊó•ÂºÄÂßãÂíåÁªìÊùüÊó∂Èó¥
    const beijingTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Shanghai"}))
    const todayStartBeijing = new Date(beijingTime.getFullYear(), beijingTime.getMonth(), beijingTime.getDate(), 0, 0, 0, 0)
    const todayEndBeijing = new Date(beijingTime.getFullYear(), beijingTime.getMonth(), beijingTime.getDate() + 1, 0, 0, 0, 0)
    
    // ËΩ¨Êç¢‰∏∫UTCÊó∂Èó¥Áî®‰∫éÊï∞ÊçÆÂ∫ìÊü•ËØ¢
    const todayStart = new Date(todayStartBeijing.getTime() - (8 * 60 * 60 * 1000)).toISOString() // ÂáèÂéª8Â∞èÊó∂Êó∂Â∑Æ
    const todayEnd = new Date(todayEndBeijing.getTime() - (8 * 60 * 60 * 1000)).toISOString()
    
    console.log('üïê Êó∂Èó¥ËåÉÂõ¥Ë∞ÉËØï:', {
      now: now.toISOString(),
      localTime: now.toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' }),
      beijingTime: beijingTime.toISOString(),
      todayStart,
      todayEnd,
      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
    })

    // 1. Ëé∑ÂèñÊÄªÁî®Êà∑Êï∞ (‰ΩøÁî®Service RoleÁªïËøáRLS)
    const { data: allUsers, error: usersError } = await supabase
      .from('users')
      .select('id, email, created_at, last_login')
      .order('created_at', { ascending: false })

    if (usersError) {
      console.error('Error fetching users:', usersError)
    }

    // 2. Ëé∑Âèñ‰ªäÊó•Êñ∞Ê≥®ÂÜåÁî®Êà∑
    console.log('Êü•ËØ¢‰ªäÊó•Ê≥®ÂÜåÁî®Êà∑ÔºåÊó∂Èó¥ËåÉÂõ¥:', { todayStart, todayEnd })
    const { data: todayUsers, error: todayUsersError } = await supabase
      .from('users')
      .select('id, email, created_at')
      .gte('created_at', todayStart)
      .lt('created_at', todayEnd)

    console.log('‰ªäÊó•Ê≥®ÂÜåÁî®Êà∑Êü•ËØ¢ÁªìÊûú:', { 
      count: todayUsers?.length || 0, 
      users: todayUsers?.map(u => ({ email: u.email, created_at: u.created_at })) || [],
      error: todayUsersError 
    })

    if (todayUsersError) {
      console.error('Error fetching today users:', todayUsersError)
    }

    // 3. Ëé∑ÂèñÊúÄËøë7Â§©Ê¥ªË∑ÉÁî®Êà∑ÔºàÊúâÁôªÂΩïËÆ∞ÂΩïÁöÑÔºâ
    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
    const { data: activeUsers, error: activeUsersError } = await supabase
      .from('users')
      .select('id')
      .gte('last_login', sevenDaysAgo)

    if (activeUsersError) {
      console.error('Error fetching active users:', activeUsersError)
    }

    // 4. Ëé∑Âèñ‰∏ãËΩΩÁªüËÆ°Ôºà‰ªéÁî®Êà∑Ê¥ªÂä®Êó•ÂøóÊàñAPIË∞ÉÁî®ËÆ∞ÂΩïÔºâ
    // Ê≥®ÊÑèÔºöËøôÈáåÈúÄË¶ÅÊ†πÊçÆ‰Ω†ÁöÑÂÆûÈôÖË°®ÁªìÊûÑË∞ÉÊï¥
    let totalDownloads = 0
    let todayDownloads = 0
    let totalApiCalls = 0
    let todayApiCalls = 0
    let removeBgCalls = 0
    let todayRemoveBg = 0

    // Â∞ùËØï‰ªéAPIË∞ÉÁî®Êó•ÂøóË°®Ëé∑ÂèñÊï∞ÊçÆÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
    try {
      const { data: apiLogs, error: apiLogsError } = await supabase
        .from('api_logs')
        .select('action, created_at')
        .order('created_at', { ascending: false })

      if (!apiLogsError && apiLogs) {
        console.log('APIÊó•ÂøóÁªüËÆ°Ë∞ÉËØï:')
        console.log('ÊÄªËÆ∞ÂΩïÊï∞:', apiLogs.length)
        console.log('Êó∂Èó¥ËåÉÂõ¥:', { todayStart, todayEnd })
        
        // ËøáÊª§‰ªäÊó•ËÆ∞ÂΩï
        const todayRecords = apiLogs.filter(log => {
          const logTime = new Date(log.created_at)
          return logTime >= todayStart && logTime < todayEnd
        })
        
        console.log('‰ªäÊó•ËÆ∞ÂΩï:', todayRecords.map(r => ({ action: r.action, created_at: r.created_at })))
        
        // ÁªüËÆ°APIË∞ÉÁî®Ê¨°Êï∞
        const apiCallsCount = apiLogs.length
        const downloadCount = apiLogs.filter(log => log.action === 'download').length
        const removeBgCount = apiLogs.filter(log => 
          log.action === 'remove_background' || log.action === 'remove_bg_api'
        ).length
        
        // ÁªüËÆ°‰ªäÊó•Êï∞ÊçÆ
         const todayApiCallsCount = todayRecords.length
         const todayDownloadsCount = todayRecords.filter(log => log.action === 'download').length
         const todayRemoveBgCount = todayRecords.filter(log => 
           log.action === 'remove_background' || log.action === 'remove_bg_api'
         ).length
         
         totalApiCalls = apiCallsCount
         totalDownloads = downloadCount
         removeBgCalls = removeBgCount
         todayApiCalls = todayApiCallsCount
         todayDownloads = todayDownloadsCount
         todayRemoveBg = todayRemoveBgCount
        
        // Â¶ÇÊûú api_logs Â≠òÂú®‰ΩÜ‰∏∫Á©∫ÔºåÈôçÁ∫ßÂà∞ usage_stats ÁªüËÆ°
        if (apiLogs.length === 0) {
          throw new Error('api_logs empty, fallback to usage_stats')
        }
      }
    } catch (error) {
      console.log('API logs table not found, trying usage_stats table...')
      
      // Â∞ùËØï‰ªé usage_stats Ë°®Ëé∑ÂèñÊï∞ÊçÆ
      try {
        const { data: usageStats, error: usageError } = await supabase
          .from('usage_stats')
          .select('action_type, created_at')

        if (!usageError && usageStats) {
          console.log('‚úÖ ÊâæÂà∞ usage_stats Êï∞ÊçÆ:', usageStats.length, 'Êù°ËÆ∞ÂΩï')
          totalApiCalls = usageStats.length
          todayApiCalls = usageStats.filter(stat => stat.created_at >= todayStart && stat.created_at < todayEnd).length
          
          // ÁªüËÆ°‰∏ãËΩΩÂíåÊä†ÂõæÔºàÈÄÇÈÖç usage_stats Â≠óÊÆµÂêçÔºâ
          totalDownloads = usageStats.filter(stat => stat.action_type === 'download').length
          todayDownloads = usageStats.filter(stat => 
            stat.action_type === 'download' && 
            stat.created_at >= todayStart && 
            stat.created_at < todayEnd
          ).length
          
          // Êä†ÂõæÔºöÂÖºÂÆπ action_type ÂëΩÂêçÂ∑ÆÂºÇ
          removeBgCalls = usageStats.filter(stat => 
            stat.action_type === 'remove_background' || stat.action_type === 'remove_bg_api'
          ).length
          todayRemoveBg = usageStats.filter(stat => 
            (stat.action_type === 'remove_background' || stat.action_type === 'remove_bg_api') && 
            stat.created_at >= todayStart && 
            stat.created_at < todayEnd
          ).length
        } else {
          throw new Error('Usage stats table not accessible')
        }
      } catch (usageError) {
        console.log('Usage stats table also not found, returning zero values for testing')
        // ÊµãËØïÊ®°ÂºèÔºöËøîÂõû0ÂÄº‰ª•‰æøËßÇÂØüÂÆûÊó∂ËÆ∞ÂΩï
        totalDownloads = 0
        todayDownloads = 0
        totalApiCalls = 0
        todayApiCalls = 0
        removeBgCalls = 0
        todayRemoveBg = 0
      }
    }

    // 5. Ëé∑ÂèñÁî®Êà∑ËØ¶ÁªÜÁªüËÆ°Ôºà‰ΩøÁî®ÁúüÂÆûÊï∞ÊçÆÔºâ
    const recentUsers = await Promise.all((allUsers || []).slice(0, 50).map(async (user) => {
      // Ëé∑ÂèñÊØè‰∏™Áî®Êà∑ÁöÑÁúüÂÆûÁªüËÆ°Êï∞ÊçÆ
      let downloadCount = 0
      let removeBgCount = 0
      let totalApiCalls = 0
      let loginCount = 0

      try {
        // ‰ºòÂÖà‰ªéÊñ∞ÁöÑ remove_api_logs Ë°®Ëé∑ÂèñÊä†ÂõæÁªüËÆ°
        try {
          const removeApiStats = await RemoveApiLogger.getUserUsageStats(user.id)
          removeBgCount = removeApiStats.totalCalls
        } catch (removeApiError) {
          console.log(`‰ªé remove_api_logs Ëé∑ÂèñÁî®Êà∑ ${user.id} Êä†ÂõæÁªüËÆ°Â§±Ë¥•ÔºåÈôçÁ∫ßÂà∞ usage_stats:`, removeApiError)
        }

        // ‰ªé usage_stats Ë°®Ëé∑ÂèñÂÖ∂‰ªñÁªüËÆ°Êï∞ÊçÆ
        const { data: userStats } = await supabase
          .from('usage_stats')
          .select('action_type, created_at')
          .eq('user_id', user.id)

        if (userStats) {
          downloadCount = userStats.filter(stat => stat.action_type === 'download').length
          // Â¶ÇÊûúÊñ∞ÁöÑ remove_api_logs Ë°®Ê≤°ÊúâÊï∞ÊçÆÔºåÂàô‰ΩøÁî® usage_stats ÁöÑÊä†ÂõæÁªüËÆ°
          if (removeBgCount === 0) {
            removeBgCount = userStats.filter(stat => 
              stat.action_type === 'remove_background' || stat.action_type === 'remove_bg_api'
            ).length
          }
          totalApiCalls = userStats.length
          loginCount = userStats.filter(stat => stat.action_type === 'login').length
        }
      } catch (error) {
        console.log(`Ëé∑ÂèñÁî®Êà∑ ${user.id} ÁªüËÆ°Êï∞ÊçÆÂ§±Ë¥•:`, error)
      }

      return {
        id: user.id,
        name: user.email?.split('@')[0] || 'Êú™Áü•Áî®Êà∑',
        email: user.email,
        title: '51TalkÂëòÂ∑•',
        created_at: user.created_at,
        last_login: user.last_login || user.created_at,
        download_count: downloadCount,
        remove_bg_count: removeBgCount,
        total_api_calls: totalApiCalls,
        login_count: loginCount || 1 // Ëá≥Â∞ëÁôªÂΩï1Ê¨°
      }
    }))

    // ÈáçÊñ∞ËÆ°ÁÆóÊÄª‰ΩìÁªüËÆ°Êï∞ÊçÆÔºàÂü∫‰∫éÁî®Êà∑ËØ¶ÁªÜÊï∞ÊçÆÔºâ
    const realTotalDownloads = recentUsers.reduce((sum, user) => sum + user.download_count, 0)
    const realTotalApiCalls = recentUsers.reduce((sum, user) => sum + user.total_api_calls, 0)
    const realRemoveBgCalls = recentUsers.reduce((sum, user) => sum + user.remove_bg_count, 0)

    // ÊûÑÂª∫ÂìçÂ∫îÊï∞ÊçÆ
    const responseData = {
      totalUsers: allUsers?.length || 0,
      activeUsers: activeUsers?.length || 0,
      totalDownloads: realTotalDownloads || totalDownloads,
      totalApiCalls: realTotalApiCalls || totalApiCalls,
      removeBgCalls: realRemoveBgCalls || removeBgCalls,
      todayRegistrations: todayUsers?.length || 0,
      todayDownloads,
      todayApiCalls,
      todayRemoveBg,
      recentUsers,
      lastUpdated: new Date().toISOString()
    }

    return NextResponse.json({
      success: true,
      data: responseData,
      timestamp: new Date().toISOString()
    })

  } catch (error: any) {
    console.error('Admin stats API error:', error)
    
    // ËøîÂõûÈîôËØØ‰ΩÜÂåÖÂê´Â§áÁî®Êï∞ÊçÆ
    return NextResponse.json({
      success: false,
      error: error.message,
      data: {
        totalUsers: 0,
        activeUsers: 0,
        totalDownloads: 0,
        totalApiCalls: 0,
        removeBgCalls: 0,
        todayRegistrations: 0,
        todayDownloads: 0,
        todayApiCalls: 0,
        todayRemoveBg: 0,
        recentUsers: [],
        lastUpdated: new Date().toISOString()
      },
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}